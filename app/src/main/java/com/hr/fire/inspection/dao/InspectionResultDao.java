package com.hr.fire.inspection.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.fire.inspection.entity.CheckType;
import com.hr.fire.inspection.entity.CompanyInfo;

import com.hr.fire.inspection.entity.InspectionResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_inspection_result".
*/
public class InspectionResultDao extends AbstractDao<InspectionResult, Long> {

    public static final String TABLENAME = "t_inspection_result";

    /**
     * Properties of entity InspectionResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckTypeId = new Property(1, Long.class, "checkTypeId", false, "CHECK_TYPE_ID");
        public final static Property CompanyInfoId = new Property(2, Long.class, "companyInfoId", false, "COMPANY_INFO_ID");
        public final static Property Profession = new Property(3, String.class, "profession", false, "PROFESSION");
        public final static Property CheckPerson = new Property(4, String.class, "checkPerson", false, "CHECK_PERSON");
        public final static Property CheckDate = new Property(5, java.util.Date.class, "checkDate", false, "CHECK_DATE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property ImgPath = new Property(7, String.class, "imgPath", false, "IMG_PATH");
        public final static Property Param1 = new Property(8, String.class, "param1", false, "PARAM1");
        public final static Property Param2 = new Property(9, String.class, "param2", false, "PARAM2");
        public final static Property Param3 = new Property(10, String.class, "param3", false, "PARAM3");
        public final static Property Param4 = new Property(11, String.class, "param4", false, "PARAM4");
        public final static Property Param5 = new Property(12, String.class, "param5", false, "PARAM5");
        public final static Property Param6 = new Property(13, String.class, "param6", false, "PARAM6");
        public final static Property Param7 = new Property(14, String.class, "param7", false, "PARAM7");
        public final static Property Param8 = new Property(15, String.class, "param8", false, "PARAM8");
        public final static Property Param9 = new Property(16, String.class, "param9", false, "PARAM9");
        public final static Property Param10 = new Property(17, String.class, "param10", false, "PARAM10");
        public final static Property Param11 = new Property(18, String.class, "param11", false, "PARAM11");
        public final static Property Param12 = new Property(19, String.class, "param12", false, "PARAM12");
        public final static Property Param13 = new Property(20, String.class, "param13", false, "PARAM13");
        public final static Property Param14 = new Property(21, String.class, "param14", false, "PARAM14");
        public final static Property Param15 = new Property(22, String.class, "param15", false, "PARAM15");
        public final static Property Param16 = new Property(23, String.class, "param16", false, "PARAM16");
        public final static Property Param17 = new Property(24, String.class, "param17", false, "PARAM17");
        public final static Property Param18 = new Property(25, String.class, "param18", false, "PARAM18");
        public final static Property Param19 = new Property(26, String.class, "param19", false, "PARAM19");
        public final static Property Param20 = new Property(27, String.class, "param20", false, "PARAM20");
        public final static Property Param21 = new Property(28, String.class, "param21", false, "PARAM21");
        public final static Property Param22 = new Property(29, String.class, "param22", false, "PARAM22");
        public final static Property Param23 = new Property(30, String.class, "param23", false, "PARAM23");
        public final static Property Param24 = new Property(31, String.class, "param24", false, "PARAM24");
        public final static Property Param25 = new Property(32, String.class, "param25", false, "PARAM25");
        public final static Property Param26 = new Property(33, String.class, "param26", false, "PARAM26");
    }

    private DaoSession daoSession;


    public InspectionResultDao(DaoConfig config) {
        super(config);
    }
    
    public InspectionResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_inspection_result\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECK_TYPE_ID\" INTEGER," + // 1: checkTypeId
                "\"COMPANY_INFO_ID\" INTEGER," + // 2: companyInfoId
                "\"PROFESSION\" TEXT," + // 3: profession
                "\"CHECK_PERSON\" TEXT," + // 4: checkPerson
                "\"CHECK_DATE\" INTEGER," + // 5: checkDate
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"IMG_PATH\" TEXT," + // 7: imgPath
                "\"PARAM1\" TEXT," + // 8: param1
                "\"PARAM2\" TEXT," + // 9: param2
                "\"PARAM3\" TEXT," + // 10: param3
                "\"PARAM4\" TEXT," + // 11: param4
                "\"PARAM5\" TEXT," + // 12: param5
                "\"PARAM6\" TEXT," + // 13: param6
                "\"PARAM7\" TEXT," + // 14: param7
                "\"PARAM8\" TEXT," + // 15: param8
                "\"PARAM9\" TEXT," + // 16: param9
                "\"PARAM10\" TEXT," + // 17: param10
                "\"PARAM11\" TEXT," + // 18: param11
                "\"PARAM12\" TEXT," + // 19: param12
                "\"PARAM13\" TEXT," + // 20: param13
                "\"PARAM14\" TEXT," + // 21: param14
                "\"PARAM15\" TEXT," + // 22: param15
                "\"PARAM16\" TEXT," + // 23: param16
                "\"PARAM17\" TEXT," + // 24: param17
                "\"PARAM18\" TEXT," + // 25: param18
                "\"PARAM19\" TEXT," + // 26: param19
                "\"PARAM20\" TEXT," + // 27: param20
                "\"PARAM21\" TEXT," + // 28: param21
                "\"PARAM22\" TEXT," + // 29: param22
                "\"PARAM23\" TEXT," + // 30: param23
                "\"PARAM24\" TEXT," + // 31: param24
                "\"PARAM25\" TEXT," + // 32: param25
                "\"PARAM26\" TEXT);"); // 33: param26
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_inspection_result\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectionResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long checkTypeId = entity.getCheckTypeId();
        if (checkTypeId != null) {
            stmt.bindLong(2, checkTypeId);
        }
 
        Long companyInfoId = entity.getCompanyInfoId();
        if (companyInfoId != null) {
            stmt.bindLong(3, companyInfoId);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(4, profession);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(5, checkPerson);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(6, checkDate.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(8, imgPath);
        }
 
        String param1 = entity.getParam1();
        if (param1 != null) {
            stmt.bindString(9, param1);
        }
 
        String param2 = entity.getParam2();
        if (param2 != null) {
            stmt.bindString(10, param2);
        }
 
        String param3 = entity.getParam3();
        if (param3 != null) {
            stmt.bindString(11, param3);
        }
 
        String param4 = entity.getParam4();
        if (param4 != null) {
            stmt.bindString(12, param4);
        }
 
        String param5 = entity.getParam5();
        if (param5 != null) {
            stmt.bindString(13, param5);
        }
 
        String param6 = entity.getParam6();
        if (param6 != null) {
            stmt.bindString(14, param6);
        }
 
        String param7 = entity.getParam7();
        if (param7 != null) {
            stmt.bindString(15, param7);
        }
 
        String param8 = entity.getParam8();
        if (param8 != null) {
            stmt.bindString(16, param8);
        }
 
        String param9 = entity.getParam9();
        if (param9 != null) {
            stmt.bindString(17, param9);
        }
 
        String param10 = entity.getParam10();
        if (param10 != null) {
            stmt.bindString(18, param10);
        }
 
        String param11 = entity.getParam11();
        if (param11 != null) {
            stmt.bindString(19, param11);
        }
 
        String param12 = entity.getParam12();
        if (param12 != null) {
            stmt.bindString(20, param12);
        }
 
        String param13 = entity.getParam13();
        if (param13 != null) {
            stmt.bindString(21, param13);
        }
 
        String param14 = entity.getParam14();
        if (param14 != null) {
            stmt.bindString(22, param14);
        }
 
        String param15 = entity.getParam15();
        if (param15 != null) {
            stmt.bindString(23, param15);
        }
 
        String param16 = entity.getParam16();
        if (param16 != null) {
            stmt.bindString(24, param16);
        }
 
        String param17 = entity.getParam17();
        if (param17 != null) {
            stmt.bindString(25, param17);
        }
 
        String param18 = entity.getParam18();
        if (param18 != null) {
            stmt.bindString(26, param18);
        }
 
        String param19 = entity.getParam19();
        if (param19 != null) {
            stmt.bindString(27, param19);
        }
 
        String param20 = entity.getParam20();
        if (param20 != null) {
            stmt.bindString(28, param20);
        }
 
        String param21 = entity.getParam21();
        if (param21 != null) {
            stmt.bindString(29, param21);
        }
 
        String param22 = entity.getParam22();
        if (param22 != null) {
            stmt.bindString(30, param22);
        }
 
        String param23 = entity.getParam23();
        if (param23 != null) {
            stmt.bindString(31, param23);
        }
 
        String param24 = entity.getParam24();
        if (param24 != null) {
            stmt.bindString(32, param24);
        }
 
        String param25 = entity.getParam25();
        if (param25 != null) {
            stmt.bindString(33, param25);
        }
 
        String param26 = entity.getParam26();
        if (param26 != null) {
            stmt.bindString(34, param26);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectionResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long checkTypeId = entity.getCheckTypeId();
        if (checkTypeId != null) {
            stmt.bindLong(2, checkTypeId);
        }
 
        Long companyInfoId = entity.getCompanyInfoId();
        if (companyInfoId != null) {
            stmt.bindLong(3, companyInfoId);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(4, profession);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(5, checkPerson);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(6, checkDate.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(8, imgPath);
        }
 
        String param1 = entity.getParam1();
        if (param1 != null) {
            stmt.bindString(9, param1);
        }
 
        String param2 = entity.getParam2();
        if (param2 != null) {
            stmt.bindString(10, param2);
        }
 
        String param3 = entity.getParam3();
        if (param3 != null) {
            stmt.bindString(11, param3);
        }
 
        String param4 = entity.getParam4();
        if (param4 != null) {
            stmt.bindString(12, param4);
        }
 
        String param5 = entity.getParam5();
        if (param5 != null) {
            stmt.bindString(13, param5);
        }
 
        String param6 = entity.getParam6();
        if (param6 != null) {
            stmt.bindString(14, param6);
        }
 
        String param7 = entity.getParam7();
        if (param7 != null) {
            stmt.bindString(15, param7);
        }
 
        String param8 = entity.getParam8();
        if (param8 != null) {
            stmt.bindString(16, param8);
        }
 
        String param9 = entity.getParam9();
        if (param9 != null) {
            stmt.bindString(17, param9);
        }
 
        String param10 = entity.getParam10();
        if (param10 != null) {
            stmt.bindString(18, param10);
        }
 
        String param11 = entity.getParam11();
        if (param11 != null) {
            stmt.bindString(19, param11);
        }
 
        String param12 = entity.getParam12();
        if (param12 != null) {
            stmt.bindString(20, param12);
        }
 
        String param13 = entity.getParam13();
        if (param13 != null) {
            stmt.bindString(21, param13);
        }
 
        String param14 = entity.getParam14();
        if (param14 != null) {
            stmt.bindString(22, param14);
        }
 
        String param15 = entity.getParam15();
        if (param15 != null) {
            stmt.bindString(23, param15);
        }
 
        String param16 = entity.getParam16();
        if (param16 != null) {
            stmt.bindString(24, param16);
        }
 
        String param17 = entity.getParam17();
        if (param17 != null) {
            stmt.bindString(25, param17);
        }
 
        String param18 = entity.getParam18();
        if (param18 != null) {
            stmt.bindString(26, param18);
        }
 
        String param19 = entity.getParam19();
        if (param19 != null) {
            stmt.bindString(27, param19);
        }
 
        String param20 = entity.getParam20();
        if (param20 != null) {
            stmt.bindString(28, param20);
        }
 
        String param21 = entity.getParam21();
        if (param21 != null) {
            stmt.bindString(29, param21);
        }
 
        String param22 = entity.getParam22();
        if (param22 != null) {
            stmt.bindString(30, param22);
        }
 
        String param23 = entity.getParam23();
        if (param23 != null) {
            stmt.bindString(31, param23);
        }
 
        String param24 = entity.getParam24();
        if (param24 != null) {
            stmt.bindString(32, param24);
        }
 
        String param25 = entity.getParam25();
        if (param25 != null) {
            stmt.bindString(33, param25);
        }
 
        String param26 = entity.getParam26();
        if (param26 != null) {
            stmt.bindString(34, param26);
        }
    }

    @Override
    protected final void attachEntity(InspectionResult entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectionResult readEntity(Cursor cursor, int offset) {
        InspectionResult entity = new InspectionResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // checkTypeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // companyInfoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // profession
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // checkPerson
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // checkDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imgPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // param1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // param2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // param3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // param4
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // param5
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // param6
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // param7
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // param8
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // param9
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // param10
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // param11
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // param12
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // param13
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // param14
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // param15
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // param16
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // param17
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // param18
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // param19
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // param20
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // param21
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // param22
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // param23
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // param24
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // param25
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // param26
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectionResult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCompanyInfoId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setProfession(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCheckPerson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImgPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParam1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParam2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParam3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParam4(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setParam5(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setParam6(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setParam7(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setParam8(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setParam9(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setParam10(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setParam11(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setParam12(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setParam13(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setParam14(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setParam15(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setParam16(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setParam17(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setParam18(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setParam19(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setParam20(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setParam21(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setParam22(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setParam23(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setParam24(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setParam25(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setParam26(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectionResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectionResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectionResult entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCheckTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCompanyInfoDao().getAllColumns());
            builder.append(" FROM t_inspection_result T");
            builder.append(" LEFT JOIN t_check_type T0 ON T.\"CHECK_TYPE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN t_company_info T1 ON T.\"COMPANY_INFO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InspectionResult loadCurrentDeep(Cursor cursor, boolean lock) {
        InspectionResult entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CheckType checkType = loadCurrentOther(daoSession.getCheckTypeDao(), cursor, offset);
        entity.setCheckType(checkType);
        offset += daoSession.getCheckTypeDao().getAllColumns().length;

        CompanyInfo companyInfo = loadCurrentOther(daoSession.getCompanyInfoDao(), cursor, offset);
        entity.setCompanyInfo(companyInfo);

        return entity;    
    }

    public InspectionResult loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InspectionResult> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InspectionResult> list = new ArrayList<InspectionResult>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InspectionResult> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InspectionResult> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
