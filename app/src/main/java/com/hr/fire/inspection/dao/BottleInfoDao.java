package com.hr.fire.inspection.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.fire.inspection.entity.CheckType;

import com.hr.fire.inspection.entity.BottleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_bottle_info".
*/
public class BottleInfoDao extends AbstractDao<BottleInfo, Long> {

    public static final String TABLENAME = "t_bottle_info";

    /**
     * Properties of entity BottleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckTypeId = new Property(1, Long.class, "checkTypeId", false, "CHECK_TYPE_ID");
        public final static Property No = new Property(2, String.class, "no", false, "NO");
        public final static Property Volume = new Property(3, String.class, "volume", false, "VOLUME");
        public final static Property Weight = new Property(4, String.class, "weight", false, "WEIGHT");
        public final static Property GoodsWeight = new Property(5, String.class, "goodsWeight", false, "GOODS_WEIGHT");
        public final static Property Pressure = new Property(6, String.class, "pressure", false, "PRESSURE");
        public final static Property ProdFactory = new Property(7, String.class, "prodFactory", false, "PROD_FACTORY");
        public final static Property ProdDate = new Property(8, java.util.Date.class, "prodDate", false, "PROD_DATE");
        public final static Property ObserveDate = new Property(9, java.util.Date.class, "observeDate", false, "OBSERVE_DATE");
        public final static Property IsPass = new Property(10, String.class, "isPass", false, "IS_PASS");
        public final static Property LabelNo = new Property(11, String.class, "labelNo", false, "LABEL_NO");
    }

    private DaoSession daoSession;


    public BottleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BottleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_bottle_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECK_TYPE_ID\" INTEGER," + // 1: checkTypeId
                "\"NO\" TEXT," + // 2: no
                "\"VOLUME\" TEXT," + // 3: volume
                "\"WEIGHT\" TEXT," + // 4: weight
                "\"GOODS_WEIGHT\" TEXT," + // 5: goodsWeight
                "\"PRESSURE\" TEXT," + // 6: pressure
                "\"PROD_FACTORY\" TEXT," + // 7: prodFactory
                "\"PROD_DATE\" INTEGER," + // 8: prodDate
                "\"OBSERVE_DATE\" INTEGER," + // 9: observeDate
                "\"IS_PASS\" TEXT," + // 10: isPass
                "\"LABEL_NO\" TEXT);"); // 11: labelNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_bottle_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BottleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long checkTypeId = entity.getCheckTypeId();
        if (checkTypeId != null) {
            stmt.bindLong(2, checkTypeId);
        }
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(3, no);
        }
 
        String volume = entity.getVolume();
        if (volume != null) {
            stmt.bindString(4, volume);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String goodsWeight = entity.getGoodsWeight();
        if (goodsWeight != null) {
            stmt.bindString(6, goodsWeight);
        }
 
        String pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindString(7, pressure);
        }
 
        String prodFactory = entity.getProdFactory();
        if (prodFactory != null) {
            stmt.bindString(8, prodFactory);
        }
 
        java.util.Date prodDate = entity.getProdDate();
        if (prodDate != null) {
            stmt.bindLong(9, prodDate.getTime());
        }
 
        java.util.Date observeDate = entity.getObserveDate();
        if (observeDate != null) {
            stmt.bindLong(10, observeDate.getTime());
        }
 
        String isPass = entity.getIsPass();
        if (isPass != null) {
            stmt.bindString(11, isPass);
        }
 
        String labelNo = entity.getLabelNo();
        if (labelNo != null) {
            stmt.bindString(12, labelNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BottleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long checkTypeId = entity.getCheckTypeId();
        if (checkTypeId != null) {
            stmt.bindLong(2, checkTypeId);
        }
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(3, no);
        }
 
        String volume = entity.getVolume();
        if (volume != null) {
            stmt.bindString(4, volume);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String goodsWeight = entity.getGoodsWeight();
        if (goodsWeight != null) {
            stmt.bindString(6, goodsWeight);
        }
 
        String pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindString(7, pressure);
        }
 
        String prodFactory = entity.getProdFactory();
        if (prodFactory != null) {
            stmt.bindString(8, prodFactory);
        }
 
        java.util.Date prodDate = entity.getProdDate();
        if (prodDate != null) {
            stmt.bindLong(9, prodDate.getTime());
        }
 
        java.util.Date observeDate = entity.getObserveDate();
        if (observeDate != null) {
            stmt.bindLong(10, observeDate.getTime());
        }
 
        String isPass = entity.getIsPass();
        if (isPass != null) {
            stmt.bindString(11, isPass);
        }
 
        String labelNo = entity.getLabelNo();
        if (labelNo != null) {
            stmt.bindString(12, labelNo);
        }
    }

    @Override
    protected final void attachEntity(BottleInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BottleInfo readEntity(Cursor cursor, int offset) {
        BottleInfo entity = new BottleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // checkTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // volume
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodsWeight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pressure
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // prodFactory
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // prodDate
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // observeDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isPass
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // labelNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BottleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVolume(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodsWeight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPressure(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProdFactory(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProdDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setObserveDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setIsPass(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLabelNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BottleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BottleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BottleInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCheckTypeDao().getAllColumns());
            builder.append(" FROM t_bottle_info T");
            builder.append(" LEFT JOIN t_check_type T0 ON T.\"CHECK_TYPE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BottleInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        BottleInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CheckType checkType = loadCurrentOther(daoSession.getCheckTypeDao(), cursor, offset);
        entity.setCheckType(checkType);

        return entity;    
    }

    public BottleInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BottleInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BottleInfo> list = new ArrayList<BottleInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BottleInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BottleInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
