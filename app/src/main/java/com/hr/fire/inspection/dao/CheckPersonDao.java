package com.hr.fire.inspection.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.fire.inspection.entity.CheckPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_check_person".
*/
public class CheckPersonDao extends AbstractDao<CheckPerson, Long> {

    public static final String TABLENAME = "t_check_person";

    /**
     * Properties of entity CheckPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Profession = new Property(1, String.class, "profession", false, "PROFESSION");
        public final static Property CheckPerson = new Property(2, String.class, "checkPerson", false, "CHECK_PERSON");
        public final static Property CheckDate = new Property(3, java.util.Date.class, "checkDate", false, "CHECK_DATE");
    }


    public CheckPersonDao(DaoConfig config) {
        super(config);
    }
    
    public CheckPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_check_person\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROFESSION\" TEXT," + // 1: profession
                "\"CHECK_PERSON\" TEXT," + // 2: checkPerson
                "\"CHECK_DATE\" INTEGER);"); // 3: checkDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_check_person\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(2, profession);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(3, checkPerson);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(4, checkDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(2, profession);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(3, checkPerson);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(4, checkDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckPerson readEntity(Cursor cursor, int offset) {
        CheckPerson entity = new CheckPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // profession
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkPerson
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // checkDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProfession(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckPerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckPerson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
