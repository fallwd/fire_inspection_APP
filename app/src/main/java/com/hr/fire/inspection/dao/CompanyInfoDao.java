package com.hr.fire.inspection.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.fire.inspection.entity.CompanyInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_company_info".
*/
public class CompanyInfoDao extends AbstractDao<CompanyInfo, Long> {

    public static final String TABLENAME = "t_company_info";

    /**
     * Properties of entity CompanyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyName = new Property(1, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property OilfieldName = new Property(2, String.class, "oilfieldName", false, "OILFIELD_NAME");
        public final static Property PlatformName = new Property(3, String.class, "platformName", false, "PLATFORM_NAME");
        public final static Property IsNecessary = new Property(4, int.class, "isNecessary", false, "IS_NECESSARY");
    }


    public CompanyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_company_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COMPANY_NAME\" TEXT," + // 1: companyName
                "\"OILFIELD_NAME\" TEXT," + // 2: oilfieldName
                "\"PLATFORM_NAME\" TEXT," + // 3: platformName
                "\"IS_NECESSARY\" INTEGER NOT NULL );"); // 4: isNecessary
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_company_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(2, companyName);
        }
 
        String oilfieldName = entity.getOilfieldName();
        if (oilfieldName != null) {
            stmt.bindString(3, oilfieldName);
        }
 
        String platformName = entity.getPlatformName();
        if (platformName != null) {
            stmt.bindString(4, platformName);
        }
        stmt.bindLong(5, entity.getIsNecessary());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(2, companyName);
        }
 
        String oilfieldName = entity.getOilfieldName();
        if (oilfieldName != null) {
            stmt.bindString(3, oilfieldName);
        }
 
        String platformName = entity.getPlatformName();
        if (platformName != null) {
            stmt.bindString(4, platformName);
        }
        stmt.bindLong(5, entity.getIsNecessary());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyInfo readEntity(Cursor cursor, int offset) {
        CompanyInfo entity = new CompanyInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // companyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // oilfieldName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // platformName
            cursor.getInt(offset + 4) // isNecessary
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOilfieldName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlatformName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsNecessary(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
